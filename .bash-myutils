

alias u='cd ../'
alias u2='cd ../../'
alias u3='cd ../../../'
alias u4='cd ../../../../'
alias m='cd -'

alias fixpaste='printf "\e[?2004l"'

alias bwork="bjobs | tail -n +2 | perl -ane '"'print "$F[2]\n";'"' | sort | uniq -c"
alias duck1='du -ch -d 1  | sort -h'
alias duck2='du -ch -d 2  | sort -h'
alias cD='cd $(pwd -P)'

  # This one not used/tested yet. Had issues with shell quoting.
  #
function set_farm_mem {
   echo $1
   MEM1="-M $1 -R ,select[mem>$1] rusage[mem=$1],"
   export MEM=${MEM1//,/'"'}
}

  # Last full file name, or batch of N last file names
  #
function ffnl()
{  local num=1
   if [[ ! -z "$1" ]]; then
      num=$1
   fi
   tail -n $num $HOME/.ffn.mycache
}

function ffncp
{ local dest=${1:?Need destination to copy last file to} 
  cp $(tail -n 1 $HOME/.ffn.mycache) $dest
}

  # not great. Use themax
function bash_max {
  local max_value
  read max_value
  while read value; do
    if [[ $value =~ ^[0-9]+$ ]] && [[ $value -gt $max_value ]]; then
        max_value=$value
    fi
  done
  echo $max_value
}
  # not great. Use themin
function bash_min {
  local min_value
  read min_value
  while read value; do
    if [[ $value =~ ^[0-9]+$ ]] && [[ $value -lt $min_value ]]; then
        min_value=$value
    fi
  done
  echo $min_value
}

function themax {
  perl -ne 'chomp; $m = $_ if $_ > $m; END { print "$m\n"; } BEGIN { $m = <>; chomp $m; }'
}
function themax2 {
  export _tmp_idx_=${1:?Need index (0-based) for column containing number}
  perl -ane 'chomp; ($m, $line) = ($F[$I], $_) if $F[$I] > $m; END { print "$line\n"; } BEGIN { $m = 0-"inf"; $line = ""; $I=$ENV{_tmp_idx_}}'
}
function themin {
  perl -ne 'chomp; $m = $_ if $_ < $m; END { print "$m\n"; } BEGIN { $m = <>; chomp $m; }'
}
function themin2 {
  export _tmp_idx_=${1:?Need index (0-based) for column containing number}
  perl -ane 'chomp; ($m, $line) = ($F[$I], $_) if $F[$I] < $m; END { print "$line\n"; } BEGIN { $m = 0+"inf"; $line = ""; $I=$ENV{_tmp_idx_}}'
}
function theminmax {
  perl -ne 'chomp;$h=$_ if$_>$h;$l=$_ if$_<$l; END { print "$l $h\n"; } BEGIN { $h=<>; chomp $h; $l=$h; }'
}

function decolon {
  local sep=${2:-:}
  local string=${1:?Need something to decolonise}
  echo $string | tr "$sep" '\n'
}

function debug_bash {
  foobar=${1:?Gimme something to run}
  ( bash --debugger <<EOC
  PS4='+ ${BASH_SOURCE[0]} '
  set -x
  $*
  set +x
  exit
EOC
)
}

function countcram {
  samtools view --input-fmt-option required_fields=2 -c ${1:?Need cram/bam argument}
}

function cpuhours {
  cpuh=${1:?Need cpu hours}
  numr=${2:?Need number of reads}
  sc=$(sc "$cpuh / (150 * ($numr / 2**30))")
  printf "%.2f CPUh per Gbase\n" $sc
}

function nflogcmd {
  name=${1:?Need nextflow run name (nextflow log)}
  nextflow log $name -f script > nf.$name.cmd.txt
}

function helpme {
  echo 'declare -F                       ¯\\_(ツ)_/¯'
}

function fqfa {
  gzip -dcf ${1:?Need file} | perl -ne '$i=($.+2)/4; print ">$i\n$_" if $. % 4 == 2'
}
