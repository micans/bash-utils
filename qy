#!/bin/bash

# Expects a set of referrer logs to live in the directory $LOGDIR.
# Naming expected to be
#     access.log
#     access.log.1.gz
#     access.log.2.gz
#     ..
# Use -h for usage.

# Todo: grep lines of interest, map address, tallyho.
# can be done by invoking self from STDIN after grep;
# need generic set of tally modes / queries. Maybe datamash some queries.

set -euo pipefail

[[ -z ${Q+x} ]] && echo "Need Q variable set to query directory" && false
[[ -z ${LOGDIR+x} ]] && echo "Need LOGDIR variable set to log directory" && false

do_last=true
do_all=false
base=refs.last
infix=
do_dl=false                # default is tallying referer strings
update_map=false
hook_map=.tar.gz
hook_dl=.tar.gz
tag_dl=dl
remap_format=false
n_tail=+1                  # by default do everything in selection

fnout=

while getopts :b:i:d:l:m:hADMT opt
do
    case "$opt" in
    T)
		remap_format=true
      ;;
    i)
      infix=$OPTARG
		base=refs.$OPTARG
      ;;
    l)
      n_tail=$OPTARG
      ;;
    b)
      tag_dl=$OPTARG
      ;;
    m)
      hook_map=$OPTARG
      ;;
    d)
      hook_dl=$OPTARG
      ;;
    D)
      do_dl=true
      ;;
    M)
      update_map=true
      ;;
    A)
      do_all=true
		do_last=false
		base=refs.zut
      ;;
    h)
      cat <<EOU
Default action is to tally referer URLs.
Alternative with -D is to log downloads.
   -D uses a cached IP lookup;
   add to IP cache in file .map with -M

Default query last access log
Input selection:
-i <NUM>   query access.log.<NUM>*, base becomes MODE.<NUM>
-A         query all access.log* files, base becomes MODE.zut
-l <NUM>   query last <NUM> lines in selected input

-d <str>   grep <str> in input to query downloads
-b <str>   tag output with <str> (default $tag_dl)
-D         query downloads, not referers (default $hook_dl)

-m <str>   grep <str> in input to add IPs to map
-M         update map (built for IPs that downloaded a tar.gz file)

-T         remap format to tab-separated: IP MAPPEDIP URL STATUS REFERRER METHOD SIZE 
EOU
      exit
      ;;
    :) echo "Flag $OPTARG needs argument"
        exit 1;;
    ?) echo "Flag $OPTARG unknown"              # Yes that's right, $OPTARG. bash bish bosh.
        exit 1;;
   esac
done

cd $LOGDIR

read curnum < .curnum
newlog=false
while [[ -e access.log.$((curnum+1)).gz ]]; do
   ((curnum += 1))
   echo "-- archive $curnum"
   newlog=true
done

if $newlog; then > $Q/.newlog; echo $curnum > .curnum; fi

# just because I wanted one.
source=$Q/readfromlogs

trap "rm -f $source" EXIT

rm -f $source
mkfifo $source
list=access.log

if [[ $infix == 0 ]]; then
   list=$(echo access.log.?.*)
elif [[ ${#infix} == 1 ]]; then
   list=$(echo access.log.$infix[^.]*)
elif [[ ${#infix} == 2 ]]; then
   list=$(echo access.log.$infix.*)
elif $do_all; then
   list=$(echo access.log.*)
fi

>&2 echo "-- files $list"
>&2 echo "-- $(zcat -f $list | wc -l) entries"
zcat -f $list | tail -n $n_tail > $Q/readfromlogs &
# zcat -f $list > $Q/readfromlogs &

cd $Q

if $remap_format; then
   perl -ne 'BEGIN{open("M",".map");%map=map{chomp;split}<M>;}/^\S+:\S+\s+(\S+)\s+\S+\s+\S+\s+\[.*?\]\s+"(\S+)\s+(.*?)\s+.*?"\s+(\d+)\s+(\d+)\s+"(.*?)"/&&(print "$1\t" . ($map{$1}?$map{$1}:"<>") . "\t$3\t$4\t$6\t$2\t$5\n")' < readfromlogs
   # parse input:                                               host:port  ip=1    id    id     date      req=2   url=3         code=4  size=5   ref=6
   # our output: IP URL STATUS REFERRER TYPE SIZE 
   #             1  3   4      6        2    5
   # host:port ip clientid userid [date] "REQUESTTYPE URL" CODE objectsize referrer useragent
elif $update_map; then
   # exit 14
   fnout=.add
   >&2 echo "-- hook $hook_map (-m <hook>)"
   > $fnout
   grep "$hook_map" < readfromlogs | perl -ne 'BEGIN{open(M,"<.map");%map=map{/^(\S+)\s+(\S+)/?($1,$2):()}<M>;close(M)}/^\S+\s+(\S+)/;($1&&defined($map{$1})&&next)||print"$1\n";' | sort -u | while read ip; do
      name=$(dig +short -x $ip)
      name=$(echo $name)            # remove trailing ws
      name=${name%.}                # remove trailing dot
      name=$(tr ' ' '-' <<< $name)  # occassionally multi-line answer
      echo -e "$ip\t[$name]"
      >&2 echo -e "$ip\t[$name]"
   done >> $fnout
   cat .map .add | sort -u -V > .mad
   shopt -s nullglob
   nmap=$(ls .map .map.* | wc -l)
   mv .map .map.$nmap
   mv .mad .map
elif $do_dl; then
   fnout=dl.${base#refs.}.txt
   fnout=$tag_dl.${fnout#dl.}
   export hook_dl
   perl -ne 'BEGIN{open("M",".map");%map=map{/^(\S+)\s+(\S+)/?($1,$2):()}<M>;}/\S+\s+(\S+).*?"GET (\S+$ENV{hook_dl}).*?"/ && print "$2\t$1\t$map{$1}\n";' readfromlogs > $fnout
   rev $fnout | sort | rev > $fnout.rev
else
   >&2 echo "-- mode ref"
   fnout=$base.ext
   perl -ne '/".*?".*?(\d+)\s+\S+\s+"(.*?)"/ && print "$1-$2\n";' readfromlogs | sort | uniq -c | sort -n | perl -pe 's/-/     /' > $base.zut
   grep -v micans.org $base.zut > $fnout
   # grep -v "\<\(ua\|ru\|kz\)\>" $fnout | grep -v "^  *1\>"
fi


if [[ -n $fnout ]]; then
   >&2 echo "-- new $fnout ($(wc -l < $fnout) lines)"
fi




# notes:
# "I believe dig +short outputs two lines for you because the domain you query,
# smtp.mydomain.net is a CNAME for smtp.ggs.mydomain.net, and dig prints the
# intermediate resolution step.  You can probably rely on the last line from
# dig's output being the IP you want, though."
