#!/bin/bash

# Moonshine script for access log queries.
# Expects a set of referrer logs to live in the directory $QY_LOGDIR (or set with -r option).
# Writes output in $QY_QRYDIR (or set with -q option).
#     Modes:
# Default: try to reverse query IP addresses for lines that match $QY_MAPTRIGGER
# (or set with -m), add to results cache in $QY_QRYDIR/.map
# -R :     output a tally of referrer IDs
# -D :     output a log of downloads
# Different input selections and (output) modes are possible. See h) / EOH below.

# Naming of log files expected to be
#     access.log
#     access.log.1
#     access.log.2.gz
#     access.log.3.gz
#     ..

# Todo
# . allow filter-by-field (rather than e.g. grep 404 in everything)
# . generic set of tally modes / queries. Maybe datamash some queries.
# . for (new) mappable visitors, sum up what interested them
# . autofilter referrer spam and crawlers

set -euo pipefail

update_map=true            # Four main modes
do_dl=false
do_ref=false
remap_format=false

debug=false

do_last=true               # Input selection modes
do_week=false              # Can use this for cron job per-week tallying
do_all=false
read_stdin=false
n_tail=+1                  # by default do everything in selection

base=refs.last
hook_dl=.tar.gz
tag_dl=dl

QY_MAPTRIGGER=${QY_MAPTRIGGER:-/}
QY_LOGDIR=${QY_LOGDIR:-QY_LOGDIR_unset}
QY_QRYDIR=${QY_QRYDIR:-QY_QRYDIR_unset}
QY_SITENAME=${QY_SITENAME:-QY_SITENAME_unset}
QY_WEEKANCHOR=${QY_WEEKANCHOR:-'last Saturday'}

fnout=

while getopts :u:r:q:b:d:l:m:WhADTRI_ opt
do
    case "$opt" in
    l) n_tail=$OPTARG ;;
    b) base=refs.$OPTARG ;;
    m) QY_MAPTRIGGER=$OPTARG ;;
    d) hook_dl=$OPTARG ;;
    r) QY_LOGDIR=$OPTARG ;;
    q) QY_QRYDIR=$OPTARG ;;
    u) QY_SITENAME=$OPTARG ;;
    T) remap_format=true ;;
    _) debug=true ;;
    I) read_stdin=true ;;
    W) do_week=true; base=refs.w$(date -d "$QY_WEEKANCHOR" +%U) ;;
    D) do_dl=true ;;
    R) do_ref=true ;;
    A) do_all=true; do_last=false; base=refs.zut ;;
    h) cat <<EOH
Default action: using selected input expand IP map on trigger ($QY_MAPTRIGGER)
Alternative with -D is to log downloads.
Alternative with -R is to tally referrers.

Input selection:
Default query file 'access log'
-m <str>   grep "<str>" in input to add IPs to map (default $QY_MAPTRIGGER)
-A         query all access.log* files, base becomes MODE.zut
-W         query last 7 log files (currently hardcoded as access.log.1 access.log.[2-7].gz)
           Output is indexed by week in year as it was: '$QY_WEEKANCHOR' (env QY_WEEKANCHOR)
           (hook intended for use in weekly cron jobs)
-I         read STDIN
-l <NUM>   query last <NUM> lines in selected input

-R         tally referrer URLs
-D         query downloads, not referers (default $hook_dl)
-d <str>   grep "<str>" in input to query downloads
-b <str>   tag output with <str> (default $tag_dl)
-T         remap input to tsv: IP MAPPEDIP URL STATUS REFERRER METHOD SIZE 

-q <str>   set place for writing output (default $QY_QRYDIR, env QY_QRYDIR)
-r <str>   set place for reading logs (default $QY_LOGDIR, env QY_LOGDIR)
-u <str>   set site name (default $QY_SITENAME, env QY_SITENAME)
EOH
      exit 0 ;;
    :) echo "Flag $OPTARG needs argument"; exit 1 ;;
    ?) echo "Flag $OPTARG unknown"; exit 1 ;;
   esac
done

cd $QY_LOGDIR

# just because I wanted one.
source=$QY_QRYDIR/readfromlogs

trap "rm -f $source" EXIT

rm -f $source
mkfifo $source

list=access.log
if $read_stdin; then
   list=-
elif $do_week; then
   list=$(echo access.log.1 access.log.[2-7].gz)
fi


>&2 echo "-- files $list"
if ! $read_stdin; then
   >&2 echo "-- $(zcat -f $list | wc -l) entries"
fi
zcat -f $list | tail -n $n_tail > $QY_QRYDIR/readfromlogs &
# zcat -f $list > $QY_QRYDIR/readfromlogs &

cd $QY_QRYDIR
touch .map

if $remap_format; then
   perl -ne 'BEGIN{open("M",".map");%map=map{chomp;split}<M>;}/^\S+:\S+\s+(\S+)\s+\S+\s+\S+\s+\[.*?\]\s+"(\S+)\s+(.*?)\s+.*?"\s+(\d+)\s+(\d+)\s+"(.*?)"/&&(print "$1\t" . ($map{$1}?$map{$1}:"<>") . "\t$3\t$4\t$6\t$2\t$5\n")' < readfromlogs
   # parse input:                                               host:port  ip=1    id    id     date      req=2   url=3         code=4  size=5   ref=6
   # our output: IP URL STATUS REFERRER TYPE SIZE 
   #             1  3   4      6        2    5
   # host:port ip clientid userid [date] "REQUESTTYPE URL" CODE objectsize referrer useragent
elif $do_dl; then
   fnout=dl.${base#refs.}.txt
   fnout=$tag_dl.${fnout#dl.}
   export hook_dl
   perl -ne 'BEGIN{open("M",".map");%map=map{/^(\S+)\s+(\S+)/?($1,$2):()}<M>;}/\S+\s+(\S+).*?"GET (\S+$ENV{hook_dl}).*?"/ && print "$2\t$1\t$map{$1}\n";' readfromlogs > $fnout
   rev $fnout | sort | rev > $fnout.rev
elif $do_ref; then
   >&2 echo "-- mode ref"
   fnout=$base.ext
   perl -ne '/".*?".*?(\d+)\s+\S+\s+"(.*?)"/ && print "$1-$2\n";' readfromlogs | sort | uniq -c | sort -n | perl -pe 's/-/     /' > $base.zut
   grep -v $QY_SITENAME $base.zut > $fnout
   # grep -v "\<\(ua\|ru\|kz\)\>" $fnout | grep -v "^  *1\>"
elif $update_map; then
   # exit 14
   fnout=.add
   >&2 echo "-- hook $QY_MAPTRIGGER (-m <hook>)"
   > $fnout
   grep "$QY_MAPTRIGGER" < readfromlogs | perl -ne 'BEGIN{open(M,"<.map");%map=map{/^(\S+)\s+(\S+)/?($1,$2):()}<M>;close(M)}/^\S+\s+(\S+)/;($1&&defined($map{$1})&&next)||print"$1\n";' | sort -u | while read ip; do
      name=$(dig +short -x $ip)
      name=$(echo $name)            # remove trailing ws
      name=${name%.}                # remove trailing dot
      name=$(tr ' ' '-' <<< $name)  # occassionally multi-line answer
      echo -e "$ip\t[$name]"
      >&2 echo -e "$ip\t[$name]"
   done >> $fnout
   if ! $debug; then
      cat .map .add | sort -u -V > .mad
      shopt -s nullglob
      nmap=$(ls .map .map.* | wc -l)
      mv .map .map.$nmap
      mv .mad .map
   fi
fi

if [[ -n $fnout ]]; then
   >&2 echo "-- new $fnout ($(wc -l < $fnout) lines)"
fi

# notes:
# "I believe dig +short outputs two lines for you because the domain you query,
# smtp.mydomain.net is a CNAME for smtp.ggs.mydomain.net, and dig prints the
# intermediate resolution step.  You can probably rely on the last line from
# dig's output being the IP you want, though."
