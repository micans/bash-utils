#!/usr/bin/perl

#  Ascii histogram.
#  -  y-axis resolution (--nyunits)
#  -  Optional subselection of data (--min --max)
#  -  --cumulative 
#  -  quartiles indicated
#  -  100 bins (this is fixed for now)

use Getopt::Long;
use strict;
use warnings;

my $progname   = 'hissyfit';
my @ARGV_COPY  =  @ARGV;
my $n_args     =  @ARGV;
my $help       =  0;

my $cumulative =  0;
my $nyunits    =  100;
my $user_min   =  undef;
my $user_max   =  undef;

sub help {
   print <<EOH;
Usage:
   $progname [options]
Options:
--help                  this
--cumulative            print cumulative histogram
--min=NUM               use as boundary (selects as well)
--max=NUM               use as boundary (selects as well)
EOH
}

if
(! GetOptions
   (  "help"            =>   \$help
   ,  "cumulative"      =>   \$cumulative
   ,  "nyunits=i"       =>   \$nyunits
   ,  "min=f"           =>   \$user_min
   ,  "max=f"           =>   \$user_max
   )
)
   {  print STDERR "option processing failed\n";
      exit(1);
   }

if ($help) { help(); exit(0); }

die "Need multiple of five for nyunits" unless $nyunits % 5 == 0;

my @D = ();
while (<>) {
  chomp;
  push @D, $_;
}

die "No data" if !@D;

@D = sort { $a <=> $b} @D;
my $dmin  = $D[0];
my $dmax  = $D[-1];

my $q1 = $D[int(@D/4)];
my $q2 = $D[int(@D/2)];
my $q3 = $D[int(3*@D/4)];

my $hmin = $dmin;
my $hmax = $dmax;

my $out_of_boundary = 0;
if (defined($user_min)) {
  my $umin = $user_min;
  $out_of_boundary++ if $umin > $dmin;
  $hmin = $umin;
}
if (defined($user_max)) {
  my $umax = $user_max;
  $out_of_boundary++ if $umax < $dmax;
  $hmax = $umax;
}

my $ND_orig   = @D;

if ($out_of_boundary) {
  @D = grep { $_ >= $hmin && $_ <= $hmax } @D;
}
my $ND = @D;


##    This is input done.
##    Now compute histogram data.

my $width = ($hmax-$hmin) / 100;

my @H = ();                         #  histogram data

my $N_run = 0;
my $threshold_1 = $hmin;
my $threshold_2 = $hmin + $width;
my $index = 0;
my $d = 0;
my $N_assigned = 0;

while ($d < @D && $index < 100) {
  my $item = $D[$d];
  if ($item >= $threshold_1 && $item < $threshold_2) {
    $N_run++;
    $d++;
  }
  elsif ($item >= $threshold_2) {
    $H[$index] = $N_run;
    $N_assigned += $N_run;
    $N_run = 0;
    $index++;
    $threshold_1  = $threshold_2;
    $threshold_2 += $width;
  }
}

if ($N_run) {
   die "run error" if $index == 100;
   $H[$index++] = $N_run;
   $N_assigned += $N_run;
}
while ($index < 100) {          # can happen under various circumstances, e.g. user boundaries.
  $H[$index] = 0;
  $index++;
}
$H[99] += ($ND-$N_assigned);    # this controls for floating point addition causing boundary issues. 

my $lh = @H;
die "hist error ($lh)" unless @H == 100;


##    This binned the data in a rather painful way.
##    Now cumulative data is easy. We need it always, e.g. for quartiles.


my @C = ($H[0]);          #  cumulative histogram data
for (my $i=1;$i<100; $i++) {
   $C[$i] = $C[$i-1] + $H[$i];
}
$C[100] = $C[99];         # useful to interrogate one beyond and subtract later.


##    This is histogram data done.
##    Now paint the canvas, transposed.


my @canvas = ();
my %map = ( 1 => '.', 2 => '-', 3 => ':', 4 => "'" );

my $bigbin = ( sort { $b <=> $a } @H )[0];
my $bigbinid = (grep { $H[$_] == $bigbin } 0..99)[0] + 1;   # 1-based for user.
my $Ymax = $cumulative ? $ND : $bigbin;

my $NUNIT = $nyunits;                       # this variable needs capitals.

# local $" = ' ';
# print STDERR "-- (@D) (@H) (@C) $Ymax\n";

for (my $i=0;$i<100;$i++) {
  my $n = $cumulative ? $C[$i] : $H[$i];
  my $nunit = int($NUNIT*$n/$Ymax);         # support maxinum of $NUNIT steps.
  my $Nrem  = $nunit % 5;                   # one char represents 5 $NUNITs.
  my $Nfive = ($nunit - $Nrem) / 5;
  die "sum error" if $Nfive + ($Nrem > 0) > $NUNIT/5;
  my $Nzilch = $NUNIT/5 - $Nfive - ($Nrem > 0);
  $canvas[$i] = [ ('|') x $Nfive ];
  push @{$canvas[$i]}, $map{$Nrem} if $Nrem;
  push @{$canvas[$i]}, (' ') x $Nzilch;
  die "canvas paint error" unless @{$canvas[$i]} == $NUNIT/5;
}


##    Canvas done.
##    Give it to the nice people.


for (my $u=0; $u<$NUNIT/5; $u++) {
  for (my $v=0; $v<100;$v++) {
    print $canvas[$v][$NUNIT/5-$u-1];
  }
  print "\n";
}


##    Canvas given.
##    Print some stats, go to some lengths to plot quartile locations.


my $sep = '____.____,' x 10;
my $sep_a = sprintf("%.1f ", $hmin);
my $sep_z = sprintf(" %.1f", $hmax);

substr($sep, 0, length($sep_a)) = $sep_a;
substr($sep, length($sep) - length($sep_z), length($sep_z)) = $sep_z;

if ($q1 > $hmin && $q3 < $hmax && $ND >= 20) {

   my $p1 = (grep { $C[$_] > 0 && $D[$C[$_]-1] >= $q1 } 0..99)[0];
   my $p2 = (grep { $C[$_] > 0 && $D[$C[$_]-1] >= $q2 } 0..99)[0];
   my $p3 = (grep { $C[$_] > 0 && $D[$C[$_]-1] >= $q3 } 0..99)[0];

# print STDERR "$C[99] $DN $q1,$q2,$q3 $p1,$p2,$p3  $D[$C[$p1]-1],$D[$C[$p2]-1],$D[$C[$p3]-1]\n";

   substr($sep, $p1, 1) = 'Q';
   substr($sep, $p2, 1) = 'Q';
   substr($sep, $p3, 1) = 'Q';
}

print "$sep\n";

if ($out_of_boundary) {
  my $N_out_of_range = $ND_orig - $ND;
  my $oorpct = sprintf("%.1f", 100 * $N_out_of_range / $ND_orig);
  print "ND=$ND oor=$N_out_of_range/$oorpct% hmin=$hmin hmax=$hmax dmin=$dmin dmax=$dmax bigbin=$bigbin\[$bigbinid] bin-width=$width q=$q1/$q2/$q3\n";
}
else {
  print "ND=$ND dmin=$dmin dmax=$dmax bigbin=$bigbin\[$bigbinid] bin-width=$width q=$q1/$q2/$q3\n";
}

